{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { mergeProps as $7CUUz$mergeProps, filterDOMProps as $7CUUz$filterDOMProps } from \"@react-aria/utils\";\nimport { useFocusable as $7CUUz$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $7CUUz$usePress } from \"@react-aria/interactions\";\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  var _props$isDisabled = props.isDisabled,\n    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n    _props$isRequired = props.isRequired,\n    isRequired = _props$isRequired === void 0 ? false : _props$isRequired,\n    _props$isReadOnly = props.isReadOnly,\n    isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,\n    value = props.value,\n    name = props.name,\n    children = props.children,\n    ariaLabel = props[\"aria-label\"],\n    ariaLabelledby = props[\"aria-labelledby\"],\n    _props$validationStat = props.validationState,\n    validationState = _props$validationStat === void 0 ? \"valid\" : _props$validationStat;\n  var onChange = function onChange(e) {\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n  var hasChildren = children != null;\n  var hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn(\"If you do not provide children, you must specify an aria-label for accessibility\");\n  var _ref = (0, $7CUUz$usePress)({\n      isDisabled: isDisabled\n    }),\n    pressProps = _ref.pressProps,\n    isPressed = _ref.isPressed;\n  var _ref2 = (0, $7CUUz$useFocusable)(props, ref),\n    focusableProps = _ref2.focusableProps;\n  var interactions = (0, $7CUUz$mergeProps)(pressProps, focusableProps);\n  var domProps = (0, $7CUUz$filterDOMProps)(props, {\n    labelable: true\n  });\n  return {\n    inputProps: (0, $7CUUz$mergeProps)(domProps, _objectSpread(_objectSpread({\n      \"aria-invalid\": validationState === \"invalid\" || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-readonly\": isReadOnly || undefined,\n      \"aria-required\": isRequired || undefined,\n      onChange: onChange,\n      disabled: isDisabled\n    }, value == null ? {} : {\n      value: value\n    }), {}, {\n      name: name,\n      type: \"checkbox\"\n    }, interactions)),\n    isSelected: state.isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly\n  };\n}\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };","map":{"version":3,"mappings":";;;;;;AAqCO,SAASA,0CAAUC,KAAsB,EAAEC,KAAkB,EAAEC,GAAgC,EAAc;EAClH,wBAUIF,MAVAG;IACFA,4CAAa,KAAK;IAAA,oBAShBH,MATgBI;IAClBA,4CAAa,KAAK;IAAA,oBAQhBJ,MARgBK;IAClBA,4CAAa,KAAK;IAClBC,QAMEN,MAPgBM;IAElBC,OAKEP,MANGO;IAELC,WAIER,MALEQ;IAEUC,YAGZT,MAHF;IACmBU,iBAEjBV,MAFF;IAAA,wBAEEA,MAF+BW;IACjCA,qDAAkB;EAGpB,IAAIC,WAAW,SAAXA,SAAYC,GAAM;IAGpBA,EAAEC,eAAe;IACjBb,MAAMc,WAAW,CAACF,EAAEG,MAAM,CAACC,OAAO;EACpC;EAEA,IAAIC,cAAcV,YAAY,IAAI;EAClC,IAAIW,eAAeV,aAAa,IAAI,IAAIC,kBAAkB,IAAI;EAC9D,IAAI,CAACQ,eAAe,CAACC,cACnBC,QAAQC,IAAI,CAAC;EAIf,WAA8B,mBAAQ,EAAC;kBACrClB;IACF;IAFKmB,kBAADA;IAAaC,iBAAFA;EAIf,YAAuB,uBAAW,EAAEvB,OAAOE;IAAtCsB,uBAADA;EACJ,IAAIC,eAAe,qBAAS,EAAEH,YAAYE;EAC1C,IAAIE,WAAW,yBAAa,EAAE1B,OAAO;IAAC2B,WAAW;EAAI;EAErD,OAAO;IACLC,YAAY,qBAAU,EAACF;MACrB,gBAAgBf,oBAAoB,aAAakB;MACjD,qBAAqB7B,KAAK,CAAC,oBAAoB;MAC/C,iBAAiBA,KAAK,CAAC,gBAAgB;MACvC,iBAAiBK,cAAcwB;MAC/B,iBAAiBzB,cAAcyB;gBAC/BjB;MACAkB,UAAU3B;IAAA,GACNG,SAAS,IAAI,GAAG,CAAC,IAAI;aAACA;IAAK,CAAC;YAChCC;MACAwB,MAAM;IAAA,GACHN,YAAY,EACjB;IACAO,YAAY/B,MAAM+B,UAAU;eAC5BT;gBACApB;gBACAE;EACF;AACF","names":["$d2c8e2b0480f3f34$export$cbe85ee05b554577","props","state","ref","isDisabled","isRequired","isReadOnly","value","name","children","ariaLabel","ariaLabelledby","validationState","onChange","e","stopPropagation","setSelected","target","checked","hasChildren","hasAriaLabel","console","warn","pressProps","isPressed","focusableProps","interactions","domProps","labelable","inputProps","undefined","disabled","type","isSelected"],"sources":["D:\\FYP\\Projects\\App_Projects\\React Native Expo Cli Projects\\gharbar_app\\node_modules\\@react-aria\\toggle\\dist\\packages\\@react-aria\\toggle\\src\\useToggle.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the toggle is selected. */\n  isSelected: boolean,\n  /** Whether the toggle is in a pressed state. */\n  isPressed: boolean,\n  /** Whether the toggle is disabled. */\n  isDisabled: boolean,\n  /** Whether the toggle is read only. */\n  isReadOnly: boolean\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLInputElement>): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid'\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps, isPressed} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {value}),\n      name,\n      type: 'checkbox',\n      ...interactions\n    }),\n    isSelected: state.isSelected,\n    isPressed,\n    isDisabled,\n    isReadOnly\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}