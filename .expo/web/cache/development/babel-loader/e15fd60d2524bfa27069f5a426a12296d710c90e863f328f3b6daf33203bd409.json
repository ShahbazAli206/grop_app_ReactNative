{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { AuthContext } from \"./AuthProvider\";\nimport { Authentication } from \"./Authentication\";\nimport { AppStack } from \"./AppStack\";\nimport { Dash_Res } from \"./Dash_Res\";\nimport { Dash_Admin } from \"./Dash_Admin\";\nimport { Dash_Tech } from \"./Dash_Technician\";\nimport * as SecureStore from 'expo-secure-store';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Routes() {\n  var _useContext = useContext(AuthContext),\n    user = _useContext.user,\n    setUser = _useContext.setUser,\n    login = _useContext.login,\n    logout = _useContext.logout;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  useEffect(function () {\n    SecureStore.getItemAsync('user').then(function (userString) {\n      if (userString) {\n        login();\n        userObject = JSON.parse(userString);\n        setUser(userObject);\n      }\n      setLoading(false);\n    }).catch(function (err) {\n      console.log(err);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\"\n      })\n    });\n  }\n  return _jsx(NavigationContainer, {\n    children: user ? user.id == 2 ? _jsx(Dash_Admin, {}) : user.id == 1 ? _jsx(Dash_Res, {\n      Dash_Admin: true\n    }) : _jsx(Dash_Tech, {}) : _jsx(Authentication, {})\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","useContext","StyleSheet","Text","View","Button","TextInput","ActivityIndicator","AsyncStorage","NavigationContainer","AuthContext","Authentication","AppStack","Dash_Res","Dash_Admin","Dash_Tech","SecureStore","jsx","_jsx","Routes","_useContext","user","setUser","login","logout","_useState","_useState2","_slicedToArray","loading","setLoading","getItemAsync","then","userString","userObject","JSON","parse","catch","err","console","log","style","flex","alignItems","justifyContent","children","size","id"],"sources":["D:/FYP/Projects/App_Projects/React Native Expo Cli Projects/gharbar_app/src/Routes.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { StyleSheet, Text, View, Button, TextInput, ActivityIndicator, AsyncStorage } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { AuthContext } from './AuthProvider';\nimport { Authentication } from './Authentication';\nimport { AppStack } from './AppStack';\nimport { Dash_Res } from './Dash_Res';\nimport { Dash_Admin } from \"./Dash_Admin\";\nimport { Dash_Tech } from \"./Dash_Technician\";\nimport * as SecureStore from 'expo-secure-store';\n\nexport default function Routes() {\n  const { user, setUser, login, logout } = useContext(AuthContext)\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // check if the user is logged in or not\n    SecureStore.getItemAsync('user')\n      .then(userString => {\n        if (userString) {\n          // decode it\n          login();\n          userObject = JSON.parse(userString)\n          setUser(userObject);\n        }\n        setLoading(false);\n      })\n      .catch(err => {\n        console.log(err);\n        setLoading(false)\n      })\n  }, []);\n\n  if (loading) {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <ActivityIndicator size=\"large\" />\n      </View>\n    )\n  }\n  return (\n    <NavigationContainer>\n      {user ? \n          ((user.id == 2) ? <Dash_Admin />\n                      : (user.id==1 ? <Dash_Res Dash_Admin />\n                                    : <Dash_Tech />) )\n        : <Authentication />}\n    </NavigationContainer>\n  );\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,iBAAA;AAAA,SACQC,YAAY;AACnF,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,WAAW;AACpB,SAASC,cAAc;AACvB,SAASC,QAAQ;AACjB,SAASC,QAAQ;AACjB,SAASC,UAAU;AACnB,SAASC,SAAS;AAClB,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEjD,eAAe,SAASC,MAAMA,CAAA,EAAG;EAC/B,IAAAC,WAAA,GAAyCnB,UAAU,CAACS,WAAW,CAAC;IAAxDW,IAAI,GAAAD,WAAA,CAAJC,IAAI;IAAEC,OAAO,GAAAF,WAAA,CAAPE,OAAO;IAAEC,KAAK,GAAAH,WAAA,CAALG,KAAK;IAAEC,MAAM,GAAAJ,WAAA,CAANI,MAAM;EACpC,IAAAC,SAAA,GAA8B1B,QAAQ,CAAC,IAAI,CAAC;IAAA2B,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1B1B,SAAS,CAAC,YAAM;IAEdgB,WAAW,CAACc,YAAY,CAAC,MAAM,CAAC,CAC7BC,IAAI,CAAC,UAAAC,UAAU,EAAI;MAClB,IAAIA,UAAU,EAAE;QAEdT,KAAK,EAAE;QACPU,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC;QACnCV,OAAO,CAACW,UAAU,CAAC;MACrB;MACAJ,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDO,KAAK,CAAC,UAAAC,GAAG,EAAI;MACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBR,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,OAAO,EAAE;IACX,OACEV,IAAA,CAACd,IAAI;MAACoC,KAAK,EAAE;QAAEC,IAAI,EAAE,CAAC;QAAEC,UAAU,EAAE,QAAQ;QAAEC,cAAc,EAAE;MAAS,CAAE;MAAAC,QAAA,EACvE1B,IAAA,CAACX,iBAAiB;QAACsC,IAAI,EAAC;MAAO;IAAG,EAC7B;EAEX;EACA,OACE3B,IAAA,CAACT,mBAAmB;IAAAmC,QAAA,EACjBvB,IAAI,GACCA,IAAI,CAACyB,EAAE,IAAI,CAAC,GAAI5B,IAAA,CAACJ,UAAU,KAAG,GACjBO,IAAI,CAACyB,EAAE,IAAE,CAAC,GAAG5B,IAAA,CAACL,QAAQ;MAACC,UAAU;IAAA,EAAG,GACvBI,IAAA,CAACH,SAAS,KAAI,GAC1CG,IAAA,CAACP,cAAc;EAAG,EACF;AAE1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}