{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { mergeProps as $4vDl6$mergeProps, filterDOMProps as $4vDl6$filterDOMProps, useId as $4vDl6$useId } from \"@react-aria/utils\";\nimport { useFocusable as $4vDl6$useFocusable, getFocusableTreeWalker as $4vDl6$getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { usePress as $4vDl6$usePress, useFocusWithin as $4vDl6$useFocusWithin } from \"@react-aria/interactions\";\nimport { useField as $4vDl6$useField } from \"@react-aria/label\";\nimport { useLocale as $4vDl6$useLocale } from \"@react-aria/i18n\";\nvar $884aeceb3d67f00f$export$3b7b268d09480394 = new WeakMap();\nvar $884aeceb3d67f00f$export$8e8b214e06dd397d = new WeakMap();\nvar $884aeceb3d67f00f$export$61c8d3f0151e21b2 = new WeakMap();\nfunction $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref) {\n  var value = props.value,\n    children = props.children,\n    ariaLabel = props[\"aria-label\"],\n    ariaLabelledby = props[\"aria-labelledby\"];\n  var isDisabled = props.isDisabled || state.isDisabled;\n  var hasChildren = children != null;\n  var hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn(\"If you do not provide children, you must specify an aria-label for accessibility\");\n  var checked = state.selectedValue === value;\n  var onChange = function onChange(e) {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n  var _ref = (0, $4vDl6$usePress)({\n      isDisabled: isDisabled\n    }),\n    pressProps = _ref.pressProps,\n    isPressed = _ref.isPressed;\n  var _ref2 = (0, $4vDl6$useFocusable)((0, $4vDl6$mergeProps)(props, {\n      onFocus: function onFocus() {\n        return state.setLastFocusedValue(value);\n      }\n    }), ref),\n    focusableProps = _ref2.focusableProps;\n  var interactions = (0, $4vDl6$mergeProps)(pressProps, focusableProps);\n  var domProps = (0, $4vDl6$filterDOMProps)(props, {\n    labelable: true\n  });\n  var tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;\n  if (isDisabled) tabIndex = undefined;\n  return {\n    inputProps: (0, $4vDl6$mergeProps)(domProps, _objectSpread(_objectSpread({}, interactions), {}, {\n      type: \"radio\",\n      name: (0, $884aeceb3d67f00f$export$3b7b268d09480394).get(state),\n      tabIndex: tabIndex,\n      disabled: isDisabled,\n      checked: checked,\n      value: value,\n      onChange: onChange,\n      \"aria-describedby\": [state.validationState === \"invalid\" ? (0, $884aeceb3d67f00f$export$61c8d3f0151e21b2).get(state) : null, (0, $884aeceb3d67f00f$export$8e8b214e06dd397d).get(state)].filter(Boolean).join(\" \") || undefined\n    })),\n    isDisabled: isDisabled,\n    isSelected: checked,\n    isPressed: isPressed\n  };\n}\nfunction $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state) {\n  var name = props.name,\n    validationState = props.validationState,\n    isReadOnly = props.isReadOnly,\n    isRequired = props.isRequired,\n    isDisabled = props.isDisabled,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? \"vertical\" : _props$orientation;\n  var _ref3 = (0, $4vDl6$useLocale)(),\n    direction = _ref3.direction;\n  var _ref4 = (0, $4vDl6$useField)(_objectSpread(_objectSpread({}, props), {}, {\n      labelElementType: \"span\"\n    })),\n    labelProps = _ref4.labelProps,\n    fieldProps = _ref4.fieldProps,\n    descriptionProps = _ref4.descriptionProps,\n    errorMessageProps = _ref4.errorMessageProps;\n  (0, $884aeceb3d67f00f$export$8e8b214e06dd397d).set(state, descriptionProps.id);\n  (0, $884aeceb3d67f00f$export$61c8d3f0151e21b2).set(state, errorMessageProps.id);\n  var domProps = (0, $4vDl6$filterDOMProps)(props, {\n    labelable: true\n  });\n  var _ref5 = (0, $4vDl6$useFocusWithin)({\n      onBlurWithin: function onBlurWithin() {\n        if (!state.selectedValue) state.setLastFocusedValue(null);\n      }\n    }),\n    focusWithinProps = _ref5.focusWithinProps;\n  var onKeyDown = function onKeyDown(e) {\n    var nextDir;\n    switch (e.key) {\n      case \"ArrowRight\":\n        if (direction === \"rtl\" && orientation !== \"vertical\") nextDir = \"prev\";else nextDir = \"next\";\n        break;\n      case \"ArrowLeft\":\n        if (direction === \"rtl\" && orientation !== \"vertical\") nextDir = \"next\";else nextDir = \"prev\";\n        break;\n      case \"ArrowDown\":\n        nextDir = \"next\";\n        break;\n      case \"ArrowUp\":\n        nextDir = \"prev\";\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n    var walker = (0, $4vDl6$getFocusableTreeWalker)(e.currentTarget, {\n      from: e.target\n    });\n    var nextElem;\n    if (nextDir === \"next\") {\n      nextElem = walker.nextNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.firstChild();\n      }\n    } else {\n      nextElem = walker.previousNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.lastChild();\n      }\n    }\n    if (nextElem) {\n      nextElem.focus();\n      state.setSelectedValue(nextElem.value);\n    }\n  };\n  var groupName = (0, $4vDl6$useId)(name);\n  (0, $884aeceb3d67f00f$export$3b7b268d09480394).set(state, groupName);\n  return {\n    radioGroupProps: (0, $4vDl6$mergeProps)(domProps, _objectSpread(_objectSpread({\n      role: \"radiogroup\",\n      onKeyDown: onKeyDown,\n      \"aria-invalid\": validationState === \"invalid\" || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-readonly\": isReadOnly || undefined,\n      \"aria-required\": isRequired || undefined,\n      \"aria-disabled\": isDisabled || undefined,\n      \"aria-orientation\": orientation\n    }, fieldProps), focusWithinProps)),\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\nexport { $0d5c49892c1215da$export$37b0961d2f4751e2 as useRadio, $430f30ed08ec25fa$export$62b9571f283ff5c2 as useRadioGroup };","map":{"version":3,"mappings":"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","names":["$884aeceb3d67f00f$export$3b7b268d09480394","WeakMap","$884aeceb3d67f00f$export$8e8b214e06dd397d","$884aeceb3d67f00f$export$61c8d3f0151e21b2","$0d5c49892c1215da$export$37b0961d2f4751e2","props","state","ref","value","children","ariaLabel","ariaLabelledby","isDisabled","hasChildren","hasAriaLabel","console","warn","checked","selectedValue","onChange","e","stopPropagation","setSelectedValue","pressProps","isPressed","onFocus","setLastFocusedValue","focusableProps","interactions","domProps","labelable","tabIndex","lastFocusedValue","undefined","inputProps","type","name","get","disabled","validationState","filter","Boolean","join","isSelected","$430f30ed08ec25fa$export$62b9571f283ff5c2","isReadOnly","isRequired","orientation","direction","labelElementType","labelProps","fieldProps","descriptionProps","errorMessageProps","set","id","onBlurWithin","focusWithinProps","onKeyDown","nextDir","key","preventDefault","walker","currentTarget","from","target","nextElem","nextNode","currentNode","firstChild","previousNode","lastChild","focus","groupName","radioGroupProps","role"],"sources":["D:\\FYP\\Projects\\App_Projects\\React Native Expo Cli Projects\\gharbar_app\\node_modules\\@react-aria\\radio\\dist\\packages\\@react-aria\\radio\\src\\utils.ts","D:\\FYP\\Projects\\App_Projects\\React Native Expo Cli Projects\\gharbar_app\\node_modules\\@react-aria\\radio\\dist\\packages\\@react-aria\\radio\\src\\useRadio.ts","D:\\FYP\\Projects\\App_Projects\\React Native Expo Cli Projects\\gharbar_app\\node_modules\\@react-aria\\radio\\dist\\packages\\@react-aria\\radio\\src\\useRadioGroup.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupState} from '@react-stately/radio';\n\nexport const radioGroupNames = new WeakMap<RadioGroupState, string>();\nexport const radioGroupDescriptionIds = new WeakMap<RadioGroupState, string>();\nexport const radioGroupErrorMessageIds = new WeakMap<RadioGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {radioGroupDescriptionIds, radioGroupErrorMessageIds, radioGroupNames} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface RadioAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the radio is disabled. */\n  isDisabled: boolean,\n  /** Whether the radio is currently selected. */\n  isSelected: boolean,\n  /** Whether the radio is in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an individual\n * radio button in a radio group.\n * @param props - Props for the radio.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n * @param ref - Ref to the HTML input element.\n */\nexport function useRadio(props: AriaRadioProps, state: RadioGroupState, ref: RefObject<HTMLInputElement>): RadioAria {\n  let {\n    value,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n\n  const isDisabled = props.isDisabled || state.isDisabled;\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  let checked = state.selectedValue === value;\n\n  let onChange = (e) => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  let {pressProps, isPressed} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n  let tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;\n  if (isDisabled) {\n    tabIndex = undefined;\n  }\n\n  return {\n    inputProps: mergeProps(domProps, {\n      ...interactions,\n      type: 'radio',\n      name: radioGroupNames.get(state),\n      tabIndex,\n      disabled: isDisabled,\n      checked,\n      value,\n      onChange,\n      'aria-describedby': [\n        state.validationState === 'invalid' ? radioGroupErrorMessageIds.get(state) : null,\n        radioGroupDescriptionIds.get(state)\n      ].filter(Boolean).join(' ') || undefined\n    }),\n    isDisabled,\n    isSelected: checked,\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioGroupProps} from '@react-types/radio';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {getFocusableTreeWalker} from '@react-aria/focus';\nimport {radioGroupDescriptionIds, radioGroupErrorMessageIds, radioGroupNames} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useField} from '@react-aria/label';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface RadioGroupAria {\n  /** Props for the radio group wrapper element. */\n  radioGroupProps: DOMAttributes,\n  /** Props for the radio group's visible label (if any). */\n  labelProps: DOMAttributes,\n  /** Props for the radio group description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the radio group error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a radio group component.\n * Radio groups allow users to select a single item from a list of mutually exclusive options.\n * @param props - Props for the radio group.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n */\nexport function useRadioGroup(props: AriaRadioGroupProps, state: RadioGroupState): RadioGroupAria {\n  let {\n    name,\n    validationState,\n    isReadOnly,\n    isRequired,\n    isDisabled,\n    orientation = 'vertical'\n  } = props;\n  let {direction} = useLocale();\n\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    // Radio group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  radioGroupDescriptionIds.set(state, descriptionProps.id);\n  radioGroupErrorMessageIds.set(state, errorMessageProps.id);\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // When the radio group loses focus, reset the focusable radio to null if\n  // there is no selection. This allows tabbing into the group from either\n  // direction to go to the first or last radio.\n  let {focusWithinProps} = useFocusWithin({\n    onBlurWithin() {\n      if (!state.selectedValue) {\n        state.setLastFocusedValue(null);\n      }\n    }\n  });\n\n  let onKeyDown = (e) => {\n    let nextDir;\n    switch (e.key) {\n      case 'ArrowRight':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'prev';\n        } else {\n          nextDir = 'next';\n        }\n        break;\n      case 'ArrowLeft':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'next';\n        } else {\n          nextDir = 'prev';\n        }\n        break;\n      case 'ArrowDown':\n        nextDir = 'next';\n        break;\n      case 'ArrowUp':\n        nextDir = 'prev';\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n    let walker = getFocusableTreeWalker(e.currentTarget, {from: e.target});\n    let nextElem;\n    if (nextDir === 'next') {\n      nextElem = walker.nextNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.firstChild();\n      }\n    } else {\n      nextElem = walker.previousNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.lastChild();\n      }\n    }\n    if (nextElem) {\n      // Call focus on nextElem so that keyboard navigation scrolls the radio into view\n      nextElem.focus();\n      state.setSelectedValue(nextElem.value);\n    }\n  };\n\n  let groupName = useId(name);\n  radioGroupNames.set(state, groupName);\n\n  return {\n    radioGroupProps: mergeProps(domProps, {\n      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup\n      role: 'radiogroup',\n      onKeyDown,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      'aria-disabled': isDisabled || undefined,\n      'aria-orientation': orientation,\n      ...fieldProps,\n      ...focusWithinProps\n    }),\n    labelProps,\n    descriptionProps,\n    errorMessageProps\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}